pipeline{
    agent any
    // environment {
    //     COUNTER = 0
    // }
    stages{
        stage("SCM"){
            steps{
                cleanWs()
                sh "docker system prune -af "
                sh "echo 'cloning' "
                sh "ls -lrt"
                git branch: 'main', credentialsId: 'amal-github-pin', url: 'https://github.com/qyubi/GPS-Fleet-Tracking-System-React.git'
                //git branch: 'rutuj/dashboard-login', credentialsId: 'amal-github-pin', url: 'https://github.com/qyubi/GPS-Fleet-Tracking-System-React.git'
                // git branch: 'amal-patch-3', credentialsId: 'amal-github-pin', url: 'https://github.com/qyubi/GPS-Fleet-Tracking-System-React.git'
            }
        }
        stage("Build Docker Image"){
            steps{
                script{
                     sh "ls -l"
                     sh "echo 'NEXT_PUBLIC_API_BASE_URL=\"http://3.0.46.227:9000\"' > .env"
                     sh "npm install"
                     sh "npm run build"
                     sh "ls -la "
                     sh "docker build -t react${BUILD_NUMBER} . " 
                }
            }
        }

        stage('Check and Kill Port') {
            steps {
                script {
                    def port = 8080 // Replace 8080 with the port number you want to check
                    def portInUse = sh(script: "lsof -i :${port} | awk '{print $2}' | tail -n +2", returnStdout: true).trim()
                    if (portInUse) {
                        echo "Port ${port} is already in use by process ${portInUse}. Killing the process..."
                        sh(script: "kill -9 ${portInUse}")
                        echo "Process ${portInUse} killed successfully."
                    } else {
                        echo "Port ${port} is available for use."
                    }
                }
            }
        }

        stage("deploy") {
            steps {
                script{
                    sh "ls -lrt"
                    sh "echo 'Deploying image react${BUILD_NUMBER}'"
                    sh "sed -i 's/IMAGE/react${BUILD_NUMBER}/g' docker-compose.yaml"
                    sh "cat docker-compose.yaml"
                    sh "docker-compose up -d " 
                    // sh "docker system prune -af" force fully remove all unstable docker resources
                    sh "rm -rf /var/lib/jenkins/workspace/Jenkins-react-app/"
                    // sh 'docker image prune -a --force --filter "until=5m" '
                }
            }
        }
        // stage("Cleanup Docker Images") {
        //     steps {
        //         script{
        //             sh '''
        //                 if [ "$(date +%H)" -eq "0" ] && [ "$COUNTER" -ne 0 ] && [ "$COUNTER % 6" -eq 0 ]; then
        //                     docker system prune -af
        //                 fi
        //                 COUNTER=$((COUNTER+1))
        //             '''
        //         }
        //     }
        // }
    }
}